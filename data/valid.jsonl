{"messages": [{"role": "system", "content": "You will be asked by the user to create a plant UMl model from specification text. Do so in the most clear way possible, avoid class properties and assign molteplicity.   Do not include attributes for classes. For example the class Book would be:  class Book{{}}  Use only bi-directional arc for relations and no description. For example a relation between the class Book and the class Page, if the Book can have from one to many pages and the  pages could have exactly one book, would be:  Book \"1..1\" -- \"1..*\" Page  Adapt the cardinality to each case. If the cardinality would be \"0..*\", the default one, omit it.  The plantuml has to be the class diagram. In generating the diagram perform this steps in order  1. Extract class from text 2. Extract relations form text 3. Assign the relation to the corresponding class 4. Add cardinality to the relations  Put everything in this order: first all classes and then all relations. In our example would be:  @startuml  class Book{{}} class Page{{}}  Book \"1..1\" -- \"1..*\" Page  @enduml  Output plantuml without futher text or explaination.  ##############  The specification text is:  {text}  ##############  The uml output is: "}, {"role": "user", "content": "Each product type is produced by exactly one factory. Over time, the factory that produces a given product type can change."}, {"role": "assistant", "content": "@startuml  class Factory{} class Assignment{} class ProductType{}   Factory \"1\" -- \"0..*\" Assignment Assignment \"1..1\" -- \"1\" ProductType  @enduml"}]}
{"messages": [{"role": "system", "content": "You will be asked by the user to create a plant UMl model from specification text. Do so in the most clear way possible, avoid class properties and assign molteplicity.   Do not include attributes for classes. For example the class Book would be:  class Book{{}}  Use only bi-directional arc for relations and no description. For example a relation between the class Book and the class Page, if the Book can have from one to many pages and the  pages could have exactly one book, would be:  Book \"1..1\" -- \"1..*\" Page  Adapt the cardinality to each case. If the cardinality would be \"0..*\", the default one, omit it.  The plantuml has to be the class diagram. In generating the diagram perform this steps in order  1. Extract class from text 2. Extract relations form text 3. Assign the relation to the corresponding class 4. Add cardinality to the relations  Put everything in this order: first all classes and then all relations. In our example would be:  @startuml  class Book{{}} class Page{{}}  Book \"1..1\" -- \"1..*\" Page  @enduml  Output plantuml without futher text or explaination.  ##############  The specification text is:  {text}  ##############  The uml output is: "}, {"role": "user", "content": "Each product type is produced by exactly one factory. Over time, the factory that produces a given product type can change."}, {"role": "assistant", "content": "@startuml  class Factory{} class Assignment{} class ProductType{}   Factory \"1\" -- \"0..*\" Assignment Assignment \"1..1\" -- \"1\" ProductType  @enduml"}]}
{"messages": [{"role": "system", "content": "You will be asked by the user to create a plant UMl model from specification text. Do so in the most clear way possible, avoid class properties and assign molteplicity.   Do not include attributes for classes. For example the class Book would be:  class Book{{}}  Use only bi-directional arc for relations and no description. For example a relation between the class Book and the class Page, if the Book can have from one to many pages and the  pages could have exactly one book, would be:  Book \"1..1\" -- \"1..*\" Page  Adapt the cardinality to each case. If the cardinality would be \"0..*\", the default one, omit it.  The plantuml has to be the class diagram. In generating the diagram perform this steps in order  1. Extract class from text 2. Extract relations form text 3. Assign the relation to the corresponding class 4. Add cardinality to the relations  Put everything in this order: first all classes and then all relations. In our example would be:  @startuml  class Book{{}} class Page{{}}  Book \"1..1\" -- \"1..*\" Page  @enduml  Output plantuml without futher text or explaination.  ##############  The specification text is:  {text}  ##############  The uml output is: "}, {"role": "user", "content": "Each product type is produced by exactly one factory. Over time, the factory that produces a given product type can change."}, {"role": "assistant", "content": "@startuml  class Factory{} class Assignment{} class ProductType{}   Factory \"1\" -- \"0..*\" Assignment Assignment \"1..1\" -- \"1\" ProductType  @enduml"}]}
{"messages": [{"role": "system", "content": "You will be asked by the user to create a plant UMl model from specification text. Do so in the most clear way possible, avoid class properties and assign molteplicity.   Do not include attributes for classes. For example the class Book would be:  class Book{{}}  Use only bi-directional arc for relations and no description. For example a relation between the class Book and the class Page, if the Book can have from one to many pages and the  pages could have exactly one book, would be:  Book \"1..1\" -- \"1..*\" Page  Adapt the cardinality to each case. If the cardinality would be \"0..*\", the default one, omit it.  The plantuml has to be the class diagram. In generating the diagram perform this steps in order  1. Extract class from text 2. Extract relations form text 3. Assign the relation to the corresponding class 4. Add cardinality to the relations  Put everything in this order: first all classes and then all relations. In our example would be:  @startuml  class Book{{}} class Page{{}}  Book \"1..1\" -- \"1..*\" Page  @enduml  Output plantuml without futher text or explaination.  ##############  The specification text is:  {text}  ##############  The uml output is: "}, {"role": "user", "content": "Each product type is produced by exactly one factory. Over time, the factory that produces a given product type can change."}, {"role": "assistant", "content": "@startuml  class Factory{} class Assignment{} class ProductType{}   Factory \"1\" -- \"0..*\" Assignment Assignment \"1..1\" -- \"1\" ProductType  @enduml"}]}
